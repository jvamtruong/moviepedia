// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Genre {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  movies MovieGenre[]

  @@map("genres")
}

model Country {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  movies MovieCountry[]

  @@map("countries")
}

model MovieGenre {
  id      Int   @id @default(autoincrement())
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  genreId Int
  genre   Genre @relation(fields: [genreId], references: [id])

  @@map("movie_genre")
}

model MovieCountry {
  id        Int     @id @default(autoincrement())
  movieId   Int
  movie     Movie   @relation(fields: [movieId], references: [id])
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])

  @@map("movie_country")
}

model Cast {
  id       Int         @id @default(autoincrement())
  name     String      @unique
  avatar   String?
  inMovies MovieCast[]

  @@map("casts")
}

model MovieCast {
  id               Int     @id @default(autoincrement())
  movieId          Int
  movie            Movie   @relation(fields: [movieId], references: [id])
  castId           Int
  cast             Cast    @relation(fields: [castId], references: [id])
  role             String
  relatedCastImage String?

  @@map("movie_cast")
}

model Production {
  id     Int               @id @default(autoincrement())
  name   String            @unique
  movies MovieProduction[]

  @@map("productions")
}

model MovieProduction {
  id           Int        @id @default(autoincrement())
  movieId      Int
  movie        Movie      @relation(fields: [movieId], references: [id])
  productionId Int
  production   Production @relation(fields: [productionId], references: [id])

  @@map("movie_production")
}

model Movie {
  id          Int               @id @default(autoincrement())
  title       String
  releasedAt  String
  genres      MovieGenre[]
  countries   MovieCountry[]
  casts       MovieCast[]
  productions MovieProduction[]
  src         String 
  watch_links WatchLink[]
  duration    String
  poster      String?
  description String            @db.Text
  imdbRating  String?
  seasons     Int?
  episodes    Episode[]

  @@map("movies")
}

model WatchLink {
  id      Int    @id @default(autoincrement())
  server  String
  link    String?
  movieId Int
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@map("watch_links")
}

model Episode {
  id      Int    @id @default(autoincrement())
  season  Int
  number  Int
  title   String
  link    String
  movieId Int
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@map("episodes")
}
